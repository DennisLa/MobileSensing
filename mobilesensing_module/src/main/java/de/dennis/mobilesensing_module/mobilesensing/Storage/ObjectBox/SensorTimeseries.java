package de.dennis.mobilesensing_module.mobilesensing.Storage.ObjectBox;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;

import de.dennis.mobilesensing_module.mobilesensing.Storage.*;
import io.objectbox.annotation.Backlink;
import io.objectbox.annotation.Entity;
import io.objectbox.annotation.Id;
import io.objectbox.annotation.Index;
import io.objectbox.annotation.Relation;
import io.objectbox.relation.ToMany;
import io.objectbox.annotation.Generated;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.BoxStore;
import io.objectbox.relation.ToOne;

/**
 * Created by Dennis on 07.08.2017.
 */
@Entity
public class SensorTimeseries {
    @Id(assignable = true)
    private long timestamp;
    @Index
    private String timestamp_day;
    private String type;
    private String sensor_id;
    private String user;
    @Relation
    SensorInfo sensor_info;
    @Backlink
    private List<SensorValue> values = new ToMany<>(this, SensorTimeseries_.values);
    /** Used to resolve relations */
    @Internal
    @Generated(1307364262)
    transient BoxStore __boxStore;
    @Generated(2090206812)
    @Internal
    /** This constructor was generated by ObjectBox and may change any time. */
    public SensorTimeseries(long timestamp, String timestamp_day, String type, String sensor_id, String user, long sensor_infoId) {
        this.timestamp = timestamp;
        this.timestamp_day = timestamp_day;
        this.type = type;
        this.sensor_id = sensor_id;
        this.user = user;
        this.sensor_infoToOne.setTargetId(sensor_infoId);
    }
    @Generated(1451199262)
    public SensorTimeseries() {
    }

    public long getTimestamp() {
        return timestamp;
    }
    public void setTimestamp(long timestamp) {
        this.timestamp = timestamp;
    }
    public String getTimestamp_day() {
        return timestamp_day;
    }
    public void setTimestamp_day(String timestamp_day) {
        this.timestamp_day = timestamp_day;
    }
    public String getType() {
        return type;
    }
    public void setType(String type) {
        this.type = type;
    }
    public String getSensor_id() {
        return sensor_id;
    }
    public void setSensor_id(String sensor_id) {
        this.sensor_id = sensor_id;
    }
    public String getUser() {
        return user;
    }
    public void setUser(String user) {
        this.user = user;
    }
    @Internal
    @Generated(1965469809)
    transient ToOne<SensorInfo> sensor_infoToOne = new ToOne<>(this,
            SensorTimeseries_.sensor_info);
    /** To-one relationship, resolved on first access. */
    @Generated(174470659)
    public SensorInfo getSensor_info() {
        sensor_info = sensor_infoToOne.getTarget();
        return sensor_info;
    }
    /** Set the to-one relation including its ID property. */
    @Generated(744333247)
    public void setSensor_info(SensorInfo sensor_info) {
        sensor_infoToOne.setTarget(sensor_info);
        this.sensor_info = sensor_info;
    }

    public List<SensorValue> getValues() {
        return values;
    }

    public void setValues(List<SensorValue> values) {
        this.values = values;
    }

    public BoxStore get__boxStore() {
        return __boxStore;
    }

    public void set__boxStore(BoxStore __boxStore) {
        this.__boxStore = __boxStore;
    }

    public ToOne<SensorInfo> getSensor_infoToOne() {
        return sensor_infoToOne;
    }

    public void setSensor_infoToOne(ToOne<SensorInfo> sensor_infoToOne) {
        this.sensor_infoToOne = sensor_infoToOne;
    }

    //Constructor
    public SensorTimeseries(long timestamp, String type, String sensor_id, String user, SensorInfo sensor_info, List<SensorValue> values){
        this.timestamp = timestamp;
        GregorianCalendar g = new GregorianCalendar();
        g.setTimeInMillis(timestamp);
        //2016-05-23T16:00:00.000Z
        this.timestamp_day = g.get(GregorianCalendar.YEAR)+"-"+g.get(GregorianCalendar.MONTH)+"-"+g.get(GregorianCalendar.DAY_OF_MONTH)+"T"+"00:00:00.000Z";
        this.type = type;
        this.sensor_id = sensor_id;
        this.user = user;
        sensor_info.setSensorTimeseries(this);
        setSensor_info(sensor_info);
        for(SensorValue sv: values){
            sv.setSensor_timeseries(this);
        }
        setValues(values);
    }

    public SensorTimeseries(long timestamp, String type, String sensor_id, String user, SensorInfo sensor_info, SensorValue sensor_value) {
        this.timestamp = timestamp;
        GregorianCalendar g = new GregorianCalendar();
        g.setTimeInMillis(timestamp);
        //2016-05-23T16:00:00.000Z
        this.timestamp_day = g.get(GregorianCalendar.YEAR)+"-"+(g.get(GregorianCalendar.MONTH)+1)+"-"+g.get(GregorianCalendar.DAY_OF_MONTH)+"T"+"00:00:00.000Z";
        this.type = type;
        this.sensor_id = sensor_id;
        this.user = user;
        sensor_info.setSensorTimeseries(this);
        setSensor_info(sensor_info);
        sensor_value.setSensor_timeseries(this);
        values = new ArrayList<>();
        values.add(sensor_value);
        setValues(values);
    }
    public JSONObject toJSON() throws JSONException {

        /*
        {
                  "timestamp_hour": "2016-05-23T16:00:00.000Z", // Date,
                  "type": "atomic_activity", //namespace
                  "sensor_id": "UUID", //Hash of UUID or suggestion; global unique
                  "info": { // Is something missing?
                      "sensor_name": "Activity Recognition",
                      "description": "Sensor to detect atomic movements using Smartphone and Wristband",
                      "value_info": { // using the same keys as the actual value keys
                          "1": { "name": "Standing", "description": "User is standing.", "unit": "probability (float)" },
                          "2": { "name": "Sitting", "description": "User is sitting.", "unit": "probability (float)" },
                          "3": { "name": "Lying", "description": "User is lying.", "unit": "probability (float)" }
                      }
                  },
                  "user": "user",
                  "values": [
                      {"timestamp":"1471352846000", "value": [0.85, 0.6, 0.5]}, //Number of Values depending on the dimesions of Sensor (e.g. 3 for Gyroscope, 2 for Bloddpressure, etc.)
                          // further value in hour
                          ]
              }
         */
        JSONObject timeseries = new JSONObject();
            timeseries.put("timestamp",getTimestamp());
            timeseries.put("timestamp_day",getTimestamp_day());
            timeseries.put("type",getType());
            timeseries.put("sensor_id",getSensor_id());
            //info
            timeseries.put("info",getSensor_info().toJSON());
            timeseries.put("user",getUser());
            //values
            JSONArray values = new JSONArray();
            for(SensorValue sv: getValues()){
                values.put(sv.toJSON());
            }
            timeseries.put("values",values);
            return timeseries;
    }
}
