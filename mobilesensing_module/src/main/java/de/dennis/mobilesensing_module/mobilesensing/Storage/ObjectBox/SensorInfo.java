package de.dennis.mobilesensing_module.mobilesensing.Storage.ObjectBox;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import de.dennis.mobilesensing_module.mobilesensing.Storage.*;
import io.objectbox.annotation.Backlink;
import io.objectbox.annotation.Entity;
import io.objectbox.annotation.Id;
import io.objectbox.annotation.Relation;
import io.objectbox.relation.ToMany;
import io.objectbox.annotation.Generated;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.BoxStore;
import io.objectbox.relation.ToOne;

/**
 * Created by Dennis on 07.08.2017.
 */
@Entity
public class SensorInfo {
    @Id
    private long id;
    private String sensor_name;
    private String description;
    @Backlink
    private List<ValueInfo> value_info = new ToMany<>(this, SensorInfo_.value_info);
    @Relation
    SensorTimeseries sensorTimeseries;
    /** Used to resolve relations */
    @Internal
    @Generated(1307364262)
    transient BoxStore __boxStore;
    @Internal
    @Generated(2136680298)
    transient ToOne<SensorTimeseries> sensorTimeseriesToOne = new ToOne<>(this,
            SensorInfo_.sensorTimeseries);
    @Generated(1434491603)
    @Internal
    /** This constructor was generated by ObjectBox and may change any time. */
    public SensorInfo(long id, String sensor_name, String description, long sensorTimeseriesId) {
        this.id = id;
        this.sensor_name = sensor_name;
        this.description = description;
        this.sensorTimeseriesToOne.setTargetId(sensorTimeseriesId);
    }
    @Generated(1592317574)
    public SensorInfo() {
    }
    public long getId() {
        return id;
    }
    public void setId(long id) {
        this.id = id;
    }
    public String getSensor_name() {
        return sensor_name;
    }
    public void setSensor_name(String sensor_name) {
        this.sensor_name = sensor_name;
    }
    public String getDescription() {
        return description;
    }
    public void setDescription(String description) {
        this.description = description;
    }

    public List<ValueInfo> getValue_info() {
        return value_info;
    }

    public void setValue_info(List<ValueInfo> value_info) {
        this.value_info = value_info;
    }

    public BoxStore get__boxStore() {
        return __boxStore;
    }

    public void set__boxStore(BoxStore __boxStore) {
        this.__boxStore = __boxStore;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(1191338981)
    public SensorTimeseries getSensorTimeseries() {
        sensorTimeseries = sensorTimeseriesToOne.getTarget();
        return sensorTimeseries;
    }
    /** Set the to-one relation including its ID property. */
    @Generated(624818508)
    public void setSensorTimeseries(SensorTimeseries sensorTimeseries) {
        sensorTimeseriesToOne.setTarget(sensorTimeseries);
        this.sensorTimeseries = sensorTimeseries;
    }
    //Constructor
    public SensorInfo(String sensor_name, String description, List<ValueInfo> value_info){
        id = 0;
        this.sensor_name = sensor_name;
        this.description = description;
        for(ValueInfo vi: value_info){
            vi.setSensor_info(this);
        }
        setValue_info(value_info);
    }
    public SensorInfo(String sensor_name, String description){
        id = 0;
        this.sensor_name = sensor_name;
        this.description = description;
        value_info = new ArrayList<>();
        setValue_info(value_info);
    }
    public void addValueInfo(ValueInfo vi) {
        vi.setSensor_info(this);
        if(value_info == null) {
            value_info = new ArrayList<>();
        }
        value_info.add(vi);
    }

    public JSONObject toJSON() throws JSONException {
        /*
        "info": { // Is something missing?
                      "sensor_name": "Activity Recognition",
                      "description": "Sensor to detect atomic movements using Smartphone and Wristband",
                      "value_info": { // using the same keys as the actual value keys
                          "1": { "name": "Standing", "description": "User is standing.", "unit": "probability (float)" },
                          "2": { "name": "Sitting", "description": "User is sitting.", "unit": "probability (float)" },
                          "3": { "name": "Lying", "description": "User is lying.", "unit": "probability (float)" }
                      }
                  }
         */
        JSONObject info = new JSONObject();
        info.put("sensor_name",getSensor_name());
        info.put("description",getDescription());
        //value_info
        JSONObject value_info = new JSONObject();
        for(int i = 1; i <= getValue_info().size();i++){
            value_info.put(i+"",getValue_info().get(i-1).toJSON());
        }
        info.put("value_info",value_info);
        return info;
    }
}
